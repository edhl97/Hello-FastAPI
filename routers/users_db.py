# Users DB API
from fastapi import APIRouter, HTTPException, status
# User entity from Basemodel defined in db folfer is imported
from db.models.user import User
from db.schemas.user import user_schema, users_schema
from db.client import db_client
from bson import ObjectId

router = APIRouter(prefix="/userdb", 
                   tags=["userdb"],
                   responses={status.HTTP_404_NOT_FOUND: {"message":"Not found"}})

@router.get("/", response_model=list[User])
async def users():
    return users_schema(db_client.users.find())

#Path
@router.get("/{id}")
async def user(id: str):
    return search_user("_id", ObjectId(id))

# Query
@router.get("/userquery/")
async def user(id: str):
    return search_user("_id", ObjectId(id))

# This is to insert an user in the database 
@router.post("/", response_model=User, status_code=status.HTTP_201_CREATED)
async def user(user: User):
    if type(search_user("email", user.email)) == User:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND, detail= "User already exists")
    
# This dict is because I want to convert the user in a JSON which is a dictionary
    user_dict = dict(user)
    del user_dict["id"] # ID is deleted just in case it is informed, to ensure is it going to be generated by MongoDB
    id = db_client.users.insert_one(user_dict).inserted_id
    # Check if the id is in the database (created). MongoDB calls it "_id"
    new_user = user_schema(db_client.users.find_one({"_id":id}))
    return User(**new_user)

# Complete user update, to update only a part of it we would use patch. 
@router.put("/", response_model=User)
async def user(user:User):

    user_dict = dict(user)
    del user_dict["id"]

    try:
        
        db_client.users.find_one_and_replace({"_id": ObjectId(user.id)}, user_dict)
    except:
        return {"error":"User not updated"}

    return search_user("_id", ObjectId(user.id))

# Delete user. With id is enough. Since the id is mandatory, it is passed in the path
@router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
async def user(id:str):
    found = db_client.users.find_one_and_delete({"_id": ObjectId(id)})

    if not found:
        return {"error": "User not deleted"}
    
# This function allows to search if the user already exists (username, email, etc). Search is in the database
def search_user(field: str, key):

    try:
        user = db_client.users.find_one({field: key})
        return User(**user_schema(user))
    except:
        return {"error":"User not found"}
                
